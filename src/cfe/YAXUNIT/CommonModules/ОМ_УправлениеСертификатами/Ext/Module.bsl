// Разработать тесты Yaxunit
// Создать нужное количество сертификатов на нужную сумму, проверить количество и сумму
// Создать цепочку документов Активация-Реализация-Списание по одному сертификату успешно, проверить что документы проведены и есть движения.
// Создать цепочку документов Активация-Списание по одному сертификату с ошибкой, т.к. пропущена реализация

Процедура ИсполняемыеСценарии() Экспорт
	
	
    ЮТТесты
		.ДобавитьТестовыйНабор("Подарочные сертификаты").ВТранзакции()
			.ДобавитьТест("СозданиеСертификатов","Создание сертификатов","Позитивный") 
			.ДобавитьТест("РеализацияСписание","Реализация списание","Позитивный") 
			.ДобавитьТест("СписаниеОшибка","Списание ошибка","Негативный") 
	
КонецПроцедуры

#Область СозданиеСертификатов

Процедура СозданиеСертификатов() Экспорт 
	
	КоличествоСертификатов = 10;
	ОбщаяСумма = 1000;
	
	МассивСертификатов = СоздатьСертификаты(КоличествоСертификатов, ОбщаяСумма); 
	
	СуммаСертификатов = 0;
	Для каждого стр Из МассивСертификатов Цикл
		
		СуммаСертификатов = СуммаСертификатов+Стр.Сумма;
		
	КонецЦикла;
	
	
	ЮТест.ОжидаетЧто(ОбщаяСумма-СуммаСертификатов)
	.МеньшеИлиРавно(0.01); 
	
КонецПроцедуры    

Функция СоздатьСертификаты(КоличествоСертификатов,ОбщаяСумма)
	Номинал = ОбщаяСумма/КоличествоСертификатов;
	Результат = Новый Массив;
	Для сч=1 По КоличествоСертификатов Цикл
		
		Результат.Добавить(СоздатьСертификат(Номинал)); 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьСертификат(Сумма)
	
	Результат = ЮТест.Данные().КонструкторОбъекта("Справочник.ПодарочныеСертификаты")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Сумма", Сумма)
	.Установить("Магазин", Константы.ТекущийМагазин.Получить())
	.Записать() 
	;
	возврат Результат;
	
КонецФункции


#КонецОбласти

#Область АктивацияРеализацияСписание 

Процедура РеализацияСписание() Экспорт
	
	СертификатСсылка = СоздатьСертификат(100);
	МассивДокументов = новый Массив;
	МассивДокументов.Добавить(СоздатьДокументРеализации(СертификатСсылка));
	МассивДокументов.Добавить(СоздатьДокументСписания(СертификатСсылка));
	
	ПроверитьПроведениеДокументов(МассивДокументов);
	
	ПроверитьДвиженияДокументов("ПодарочныеСертификаты", МассивДокументов);
	
	
КонецПроцедуры

#КонецОбласти  

#Область СписаниеОшибка 

Процедура СписаниеОшибка() Экспорт
	
	СертификатСсылка = СоздатьСертификат(100);
	ДокументСписания=СоздатьДокументСписания(СертификатСсылка,Ложь);
	
	ЮТест.ОжидаетЧто(ДокументСписания.ПолучитьОбъект())  
	.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) 
	.ВыбрасываетИсключение("Не удалось провести ""Списание сертификатов")	
	;
	
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
	.ИмеетТип("ФиксированныйМассив")
	.ИмеетДлину(1)
	.Свойство("[0].Текст")
	.ИмеетТип("Строка")
	.Содержит("В документе найдены неподходящие для списания сертификаты, проведение невозможно")
	;
КонецПроцедуры  
#КонецОбласти 

Функция СоздатьДокументРеализации(Сертификат, Провести = истина)
	
	КонструкторДокумента = ЮТест.Данные().КонструкторОбъекта("Документ.РеализацияСертификатов")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Дата", ТекущаяДатаСеанса()-10)
	.Установить("Магазин", Константы.ТекущийМагазин.Получить())
	.ТабличнаяЧасть("Сертификаты")
	.ДобавитьСтроку()
	.Установить("Сертификат", Сертификат);
	Если Провести Тогда
		
		ДокументСсылка=КонструкторДокумента.Провести();
		
	Иначе
		
		ДокументСсылка=КонструкторДокумента.Записать();
		
		
	КонецЕсли;			
	
	Возврат ДокументСсылка;
	
КонецФункции 


Функция СоздатьДокументСписания(Сертификат, Провести = истина)
	
	КонструкторДокумента = ЮТест.Данные().КонструкторОбъекта("Документ.СписаниеСертификатов")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Дата", ТекущаяДатаСеанса())
	.Установить("Магазин", Константы.ТекущийМагазин.Получить())
	.ТабличнаяЧасть("Сертификаты")
	.ДобавитьСтроку()
	.Установить("Сертификат", Сертификат);
	Если Провести Тогда
		
		ДокументСсылка=КонструкторДокумента.Провести();
		
	Иначе
		
		ДокументСсылка=КонструкторДокумента.Записать();
		
		
	КонецЕсли;			
	
	Возврат ДокументСсылка;
	
	
КонецФункции


Процедура ПроверитьПроведениеДокументов(МассивДокументов)
	
	Для Каждого Элемент Из МассивДокументов Цикл
		
		ПроверяемыйОбъект = Элемент.ПолучитьОбъект();
		ЮТест.ОжидаетЧто(ПроверяемыйОбъект) 
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение); 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьДвиженияДокументов(ИмяРегистра, МассивДокументов)
	
	Для Каждого Элемент Из МассивДокументов Цикл
		
		Движения = ЮТЗапросы.ДвиженияДокумента(Элемент, ИмяРегистра);
		ЮТест.ОжидаетЧто(Движения)
		.Заполнено()
		.ИмеетДлину(Элемент.Сертификаты.Количество()); 
		
	КонецЦикла;  
	
КонецПроцедуры

