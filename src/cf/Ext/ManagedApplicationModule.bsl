//{{MRG[ <-> ]
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//////////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ 
////
//}}MRG[ <-> ]
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

//{{MRG[ <-> ]
//Перем ДрайверСканераШтрихкодов Экспорт; // Сканер штрихкодов
//Перем ИдентификаторФоновогоЗадания Экспорт;
//}}MRG[ <-> ]
#Область ОписаниеПеременных

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие из КлючИЗначение:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Пример инициализации:
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Пример использования:
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередНачаломРаботыСистемы()
	
#Если МобильныйКлиент Тогда
	Если ОсновнойСерверДоступен() = Ложь Тогда
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы()");
#Иначе
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
#КонецЕсли
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
//{{MRG[ <-> ]
//
//#Если НЕ МобильныйКлиент Тогда 
//	Параметры = СервисныеМеханизмы.ПолучитьПараметры();
//	УстановитьКраткийЗаголовокПриложения(Параметры.КраткийЗаголовок);
//}}MRG[ <-> ]
	
//{{MRG[ <-> ]
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы()");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	РаботаСПанельюЗадач.ДобавитьКнопки(Параметры.ПараметрыПанелиЗадачОС);
//	
//	БотКлиент.ПриНачалеРаботыСистемы();
//}}MRG[ <-> ]
#Иначе
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
#КонецЕсли
//{{MRG[ <-> ]
	// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//#Если МобильныйКлиент Тогда 
//	
//	// идентификатор подписчика надо получать регулярно, он может измениться
//	УведомленияКлиент.ОбновитьИдентификаторПодписчикаУведомлений();
//	
//	// Подключение обработчика push-уведомлений
//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаУведомлений", УведомленияКлиент);
//	ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(ОписаниеОповещения);
//	
//	// Подключение обработчика геозон
//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаУведомлений", ГеопозиционированиеКлиент);
//	СредстваГеопозиционирования.ПодключитьОбработчикПересеченияГраницОтслеживаемыхГеозон(ОписаниеОповещения);
//	
//#КонецЕсли
//
//	ГлобальныйПоискКлиент.УстановитьОписаниеГлобальногоПоиска();
//}}MRG[ <-> ]
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)");
#Иначе
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
#КонецЕсли
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Процедура ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора,
			Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора,
		|Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка)");
#Иначе
	СтандартныеПодсистемыКлиент.ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора,
		Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
#КонецЕсли
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

//{{MRG[ <-> ]
Процедура ПриГлобальномПоиске(СтрокаПоиска, ПланПоиска)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ПриГлобальномПоиске(СтрокаПоиска, ПланГлобальногоПоиска)
//}}MRG[ <-> ]
	
//{{MRG[ <-> ]
		// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПриГлобальномПоиске(СтрокаПоиска, ПланПоиска)");
#Иначе
	СтандартныеПодсистемыКлиент.ПриГлобальномПоиске(СтрокаПоиска, ПланПоиска);
#КонецЕсли
	// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СтрокаДолг = НСтр("ru = 'долг '", "ru");
//	СтрокаДолги = НСтр("ru = 'долги'", "ru");
//	МаксДлинаКодаВДокументах = 9;
//	МинРазмерСтрокиДляПоискаКонтрагента = 2;
//	ПорядокПоиска = 5;
//	ПорядокПоискаКонтрагента = 1;
//	
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если СтрокаПоиска = "+" Тогда
//		
//		ПланГлобальногоПоиска.Очистить();
//		ПланГлобальногоПоиска.Добавить("ГлобальныйПоискКомандыСоздать", "ГлобальныйПоискКлиент", Ложь);
//		Возврат;
//	КонецЕсли;
//	
//	Если СтрДлина(СтрокаПоиска) >= МинРазмерСтрокиДляПоискаКонтрагента Тогда
//		
//		ПланГлобальногоПоиска.Добавить("ГлобальныйПоискПоискКонтрагента", "ГлобальныйПоискСервер", Истина, Истина, ПорядокПоискаКонтрагента);
//		
//	КонецЕсли;
//	
//	Если НРег(СтрокаПоиска) = СтрокаДолги ИЛИ
//		 (СтрДлина(СтрокаПоиска) > СтрДлина(СтрокаДолг) И Лев(НРег(СтрокаПоиска), СтрДлина(СтрокаДолг)) = СтрокаДолг)
//	Тогда
//		
//		ПланГлобальногоПоиска.Добавить("ГлобальныйПоискПоказатьДолги", "ГлобальныйПоискСервер", Истина, Истина, ПорядокПоиска);
//		
//	ИначеЕсли СтрДлина(СтрокаПоиска) <= МаксДлинаКодаВДокументах Тогда
//			
//		ПланГлобальногоПоиска.Добавить("ГлобальныйПоискПоКоду", "ГлобальныйПоискСервер", Истина, Истина, ПорядокПоиска);
//			
//	КонецЕсли;
//}}MRG[ <-> ]
	
КонецПроцедуры

//{{MRG[ <-> ]
Процедура ПриВыбореРезультатаГлобальногоПоиска(ЭлементРезультата, СтандартнаяОбработка)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ПриВыбореРезультатаГлобальногоПоиска(ЭлементРезультатаПоиска, СтандартнаяОбработка)
//}}MRG[ <-> ]
	
//{{MRG[ <-> ]
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПриВыбореРезультатаГлобальногоПоиска(ЭлементРезультата,
		|СтандартнаяОбработка)");
#Иначе
	СтандартныеПодсистемыКлиент.ПриВыбореРезультатаГлобальногоПоиска(ЭлементРезультата,
		СтандартнаяОбработка);
#КонецЕсли
	// Конец СтандартныеПодсистемы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СтандартнаяОбработка = Ложь;
//	
//	Если ТипЗнч(ЭлементРезультатаПоиска.Значение) = Тип("Структура") Тогда
//		
//		Если ЭлементРезультатаПоиска.Значение.Операция = "Взаиморасчеты" Тогда
//			
//			Отбор = Новый Структура;
//			Отбор.Вставить("Контрагент", ЭлементРезультатаПоиска.Значение.Контрагент);
//			Отбор.Вставить("Валюта", ЭлементРезультатаПоиска.Значение.Валюта);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			
//			ПараметрыФормы = Новый Структура;
//			ПараметрыФормы.Вставить("Отбор", Отбор);
//			
//			ОткрытьФорму("РегистрНакопления.Взаиморасчеты.ФормаСписка", ПараметрыФормы, , Истина);
//			
//		КонецЕсли;
//		
//	ИначеЕсли ЭлементРезультатаПоиска.Значение = "+Заказ" Тогда
//		
//		ОткрытьФорму("Документ.Заказ.ФормаОбъекта");
//		
//	ИначеЕсли ЭлементРезультатаПоиска.Значение = "+Приход" Тогда
//		
//		ОткрытьФорму("Документ.ПриходТовара.ФормаОбъекта");
//		
//	ИначеЕсли ЭлементРезультатаПоиска.Значение = "+Расход" Тогда
//		
//		ОткрытьФорму("Документ.РасходТовара.ФормаОбъекта");
//		
//	ИначеЕсли ЭлементРезультатаПоиска.Значение = "+Оплата" Тогда
//		
//		ОткрытьФорму("Документ.Оплата.ФормаОбъекта");
//		
//	Иначе
//		
//		СтандартнаяОбработка = Истина;
//		
//	КонецЕсли;
//	
//}}MRG[ <-> ]
КонецПроцедуры

Процедура ПриВыбореДействияРезультатаГлобальногоПоиска(ЭлементРезультата, Действие)
	
//{{MRG[ <-> ]
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ПриВыбореДействияРезультатаГлобальногоПоиска(ЭлементРезультата,
		|Действие)");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если Действие = "Заказ" Тогда
//		
//		ЗначенияЗаполнения = Новый Структура("Покупатель", ЭлементРезультата.Значение);
//		Параметры = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
//}}MRG[ <-> ]
#Иначе
	СтандартныеПодсистемыКлиент.ПриВыбореДействияРезультатаГлобальногоПоиска(ЭлементРезультата, Действие);
#КонецЕсли
	// Конец СтандартныеПодсистемы

//{{MRG[ <-> ]
//		ОткрытьФорму("Документ.Заказ.ФормаОбъекта", Параметры);
//		
//	КонецЕсли;
//	
//}}MRG[ <-> ]
КонецПроцедуры

Процедура ОбработкаПереходаПоНавигационнойСсылке(ДанныеПереходаПоНавигационнойСсылке, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы
#Если МобильныйКлиент Тогда
	Выполнить("СтандартныеПодсистемыКлиент.ОбработкаПереходаПоНавигационнойСсылке(ДанныеПереходаПоНавигационнойСсылке,
		|СтандартнаяОбработка)");
#Иначе
	СтандартныеПодсистемыКлиент.ОбработкаПереходаПоНавигационнойСсылке(ДанныеПереходаПоНавигационнойСсылке,
		СтандартнаяОбработка);
#КонецЕсли
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаОтображенияОшибки(ИнформацияОбОшибке, ТребуетсяЗавершениеСеанса, СтандартнаяОбработка)
	
#Если НЕ МобильныйКлиент Тогда
	Если ОбработкаОшибок.КатегорияОшибкиДляПользователя(ИнформацияОбОшибке) = КатегорияОшибки.НарушениеПравДоступа Тогда
		СтандартнаяОбработка = Ложь;
				
		ДополнительныйТекст = НСтр("ru = 'Для решения проблемы позвоните Иванову Ивану, по телефону %(1)'");
		ПараметрТелефон = "%(1)";
		Индекс = СтрНайти(ДополнительныйТекст, "%(1)") - 1;
		ТекстДо = Лев(ДополнительныйТекст, Индекс);
		ТекстПосле = Прав(ДополнительныйТекст, СтрДлина(ДополнительныйТекст) - Индекс - СтрДлина(ПараметрТелефон));

		НомерТелефона = "+77777777777";
		ДополнительнаяИнформация = Новый ФорматированнаяСтрока(
			ТекстДо,
			Новый ФорматированнаяСтрока(НомерТелефона, Новый Шрифт(,, Истина)),
			ТекстПосле
		);
			
		ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке,, ДополнительнаяИнформация);
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

Процедура ПослеОбменаДаннымиСОсновнымСервером(ВключеноОповещениеОСинхронизации, СтандартнаяОбработка)
	Оповестить("ПрошелОбмен");
КонецПроцедуры

#Если МобильныйКлиент Тогда
Процедура ОбработкаФормированияКомандВходящегоЗапросаПоделиться(ДанныеЗапроса, Команды)
	
	ОбработчикКоманды = Новый ОписаниеОповещения("ОбработкаВыполненияСвоейКоманды", ВходящийЗапросПоделитьсяКлиент, ДанныеЗапроса);
	НоваяКоманда = Новый ОписаниеКомандыВходящегоЗапросаПоделиться(ОбработчикКоманды, "Добавить файл...");
	Команды.Добавить(НоваяКоманда);
	
КонецПроцедуры
#КонецЕсли

Процедура ПриНажатииКнопкиПанелиКнопокСообщенияСистемыВзаимодействия(Сообщение, Кнопка)

	БотКлиент.ОбработкаДействияСообщения(Сообщение, Кнопка.ИмяДействия);

КонецПроцедуры

