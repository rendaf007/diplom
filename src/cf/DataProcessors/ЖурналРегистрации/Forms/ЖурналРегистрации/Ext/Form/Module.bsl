///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы
//{{MRG[ <-> ]
////////////////////////////////////////////////////////////////////////////////////////////
//// Обработчики событий
//}}MRG[ <-> ]

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.ЖурналДоступаКДанным Тогда
		Заголовок = НСтр("ru = 'Журнал доступа к данным'");
		СобытиеЖурналаРегистрации = Новый Массив;
		СобытиеЖурналаРегистрации.Добавить("_$Access$_.Access");
		СобытиеЖурналаРегистрации.Добавить("_$Access$_.AccessDenied");
		СобытиеЖурналаРегистрации.Добавить("_$Session$_.Authentication");
		СобытиеЖурналаРегистрации.Добавить("_$Session$_.AuthenticationError");
		СобытиеЖурналаРегистрации.Добавить("_$Session$_.Start");
		СобытиеЖурналаРегистрации.Добавить("_$Session$_.Finish");
		Элементы.Журнал.Видимость = Ложь;
		Элементы.Журнал2.Видимость = Истина;
		АвтоНавигационнаяСсылка = Ложь;
		НавигационнаяСсылка = "e1cib/command/Обработка.ЖурналРегистрации.Команда.ЖурналДоступаКДанным";
	Иначе
		Элементы.Журнал.Видимость = Истина;
		Элементы.Журнал2.Видимость = Ложь;
		СобытиеЖурналаРегистрации = Параметры.СобытиеЖурналаРегистрации;
	КонецЕсли;
	
	ОтборЖурналаРегистрации = Новый Структура;
//{{MRG[ <-> ]
	ОтборЖурналаРегистрацииПоУмолчанию = Новый Структура;
	ЗначенияОтбора = ПолучитьЗначенияОтбораЖурналаРегистрации("Событие").Событие;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СтруктураПараметровОтбора = ПолучитьЗначенияОтбораЖурналаРегистрации("Событие");
//	ЗначенияОтбораПоСобытию = СтруктураПараметровОтбора.Событие;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СписокСобытий = Новый СписокЗначений;
//}}MRG[ <-> ]
	ОтборПоПользователю = ОтборПоПользователюИзПараметра(Параметры.Пользователь);
//{{MRG[ <-> ]
	Если ЗначениеЗаполнено(ОтборПоПользователю) Тогда
		ОтборЖурналаРегистрации.Вставить("Пользователь", ОтборПоПользователю);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для каждого ЗначениеОтбораПоСобытию Из ЗначенияОтбораПоСобытию Цикл
//		Если Найти(ЗначениеОтбораПоСобытию.Значение, "Транзакция.") = 1 Тогда
//			Продолжить;
//}}MRG[ <-> ]
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СобытиеЖурналаРегистрации) Тогда
		ОтборПоСобытию = Новый СписокЗначений;
		Если ТипЗнч(СобытиеЖурналаРегистрации) = Тип("Массив") Тогда
			Для Каждого Событие Из СобытиеЖурналаРегистрации Цикл
				ОтборПоСобытию.Добавить(Событие, ПредставлениеСобытия(Событие, ЗначенияОтбора));
			КонецЦикла;
		Иначе
			Событие = СобытиеЖурналаРегистрации;
			ОтборПоСобытию.Добавить(Событие, ПредставлениеСобытия(Событие, ЗначенияОтбора));
		КонецЕсли;
//{{MRG[ <-> ]
		ОтборЖурналаРегистрации.Вставить("Событие", ОтборПоСобытию);
	КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Если Найти(ЗначениеОтбораПоСобытию.Значение, "Transaction.") = 1 Тогда
//			Продолжить;
//}}MRG[ <-> ]
	
	ОтборЖурналаРегистрации.Вставить("ДатаНачала", 
		?(ЗначениеЗаполнено(Параметры.ДатаНачала), Параметры.ДатаНачала, НачалоДня(ТекущаяДатаСеанса())));
	ОтборЖурналаРегистрации.Вставить("ДатаОкончания", 
		?(ЗначениеЗаполнено(Параметры.ДатаОкончания), Параметры.ДатаОкончания, КонецДня(ТекущаяДатаСеанса())));
	
	Если Параметры.Данные <> Неопределено Тогда
		Если ТипЗнч(Параметры.Данные) = Тип("Массив") Тогда
			ОтборЖурналаРегистрации.Вставить("Данные", Новый СписокЗначений);
			ОтборЖурналаРегистрации.Данные.ЗагрузитьЗначения(Параметры.Данные);
		Иначе
			ОтборЖурналаРегистрации.Вставить("Данные", Параметры.Данные);
		КонецЕсли;
//{{MRG[ <-> ]
	КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		СписокСобытий.Добавить(ЗначениеОтбораПоСобытию.Ключ, СтрЗаменить(ЗначениеОтбораПоСобытию.Значение, ". ", "."));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	КонецЦикла;
//}}MRG[ <-> ]
	Если Параметры.Сеанс <> Неопределено Тогда
//{{MRG[ <-> ]
		ОтборЖурналаРегистрации.Вставить("Сеанс", Параметры.Сеанс);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если СписокСобытий.Количество() <> 0 Тогда
//		ОтборЖурналаРегистрации.Вставить("Событие", СписокСобытий);
//}}MRG[ <-> ]
	КонецЕсли;
	
//{{MRG[ <-> ]
	// Уровень - список значений.
	Если Параметры.Уровень <> Неопределено Тогда
		ОтборПоУровню = Новый СписокЗначений;
		Если ТипЗнч(Параметры.Уровень) = Тип("Массив") Тогда
			Для Каждого ПредставлениеУровня Из Параметры.Уровень Цикл
				ОтборПоУровню.Добавить(ПредставлениеУровня, ПредставлениеУровня);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если Параметры.Пользователь <> Неопределено Тогда
//		ИмяПользователя = Параметры.Пользователь;
//		ОтборПоПользователю = Новый СписокЗначений;
//		ПоПользователю = ОтборПоПользователю.Добавить(ИмяПользователя);
//		Если ПустаяСтрока(ИмяПользователя) Тогда
//			ПоПользователю.Представление = НСтр("ru = '<Пользователь по умолчанию>'", "ru");
//}}MRG[ <-> ]
			КонецЦикла;
		ИначеЕсли ТипЗнч(Параметры.Уровень) = Тип("Строка") Тогда
			ОтборПоУровню.Добавить(Параметры.Уровень, Параметры.Уровень);
		Иначе
//{{MRG[ <-> ]
			ОтборПоУровню = Параметры.Уровень;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			ПоПользователю.Представление = ИмяПользователя;
//}}MRG[ <-> ]
		КонецЕсли;
//{{MRG[ <-> ]
		ОтборЖурналаРегистрации.Вставить("Уровень", ОтборПоУровню);
	КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		
//		ОтборЖурналаРегистрации.Вставить("Пользователь", ОтборПоПользователю);
//}}MRG[ <-> ]
	
	// ИмяПриложения - список значений.
	Если Параметры.ИмяПриложения <> Неопределено Тогда
		СписокПриложений = Новый СписокЗначений;
		Для Каждого Приложение Из Параметры.ИмяПриложения Цикл
			СписокПриложений.Добавить(Приложение, ПредставлениеПриложения(Приложение));
		КонецЦикла;
		ОтборЖурналаРегистрации.Вставить("ИмяПриложения", СписокПриложений);
	КонецЕсли;
	
	КоличествоПоказываемыхСобытий = 200;
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Или ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		УдаляемыйЭлемент = Элементы.КоличествоПоказываемыхСобытий.СписокВыбора.НайтиПоЗначению(10000);
		Элементы.КоличествоПоказываемыхСобытий.СписокВыбора.Удалить(УдаляемыйЭлемент);
		Элементы.КоличествоПоказываемыхСобытий.МаксимальноеЗначение = 1000;
	КонецЕсли;
	
//{{MRG[ <-> ]
	ОтборПоУмолчанию = ОтборПоУмолчанию(ЗначенияОтбора);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ПрочитатьЖурнал(ОтборЖурналаРегистрации);
//}}MRG[ <-> ]
	Если Не ОтборЖурналаРегистрации.Свойство("Событие") Тогда
		ОтборЖурналаРегистрации.Вставить("Событие", ОтборПоУмолчанию);
	КонецЕсли;
	ОтборЖурналаРегистрацииПоУмолчанию.Вставить("Событие", ОтборПоУмолчанию);
	
	ТолькоСтандартныеРазделители = ЖурналРегистрации.ТолькоСтандартныеРазделители();
	УстановитьВидимостьРазделения(ЭтотОбъект,
		Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
	Критичность = "ВсеСобытия";
	
	// Взводится в значение Истина, если нужно, чтобы формирование журнала регистрации проходило не в фоне.
	ЗапускатьНеВФоне = Параметры.ЗапускатьНеВФоне;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Критичность",	"ПоложениеЗаголовка",		ПоложениеЗаголовкаЭлементаФормы.Нет);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Критичность",	"КнопкаВыбора",				Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Журнал", 		"ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьТекущийСписок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненВходВОбластьДанных"
	 Или ИмяСобытия = "ВыполненВыходИзОбластиДанных" Тогда
		
		Журнал.Очистить();
		УстановитьВидимостьРазделения(ЭтотОбъект,
			Не ОбщегоНазначенияКлиент.ДоступноИспользованиеРазделенныхДанных());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоПоказываемыхСобытийПриИзменении(Элемент)
	
#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
	КоличествоПоказываемыхСобытий = ?(КоличествоПоказываемыхСобытий > 1000, 1000, КоличествоПоказываемыхСобытий);
#КонецЕсли
	
	ОбновитьТекущийСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КритичностьПриИзменении(Элемент)
	
	ОтборЖурналаРегистрации.Удалить("Уровень");
	ОтборПоУровню = Новый СписокЗначений;
	Если Критичность = "Ошибка" Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ИначеЕсли Критичность = "Предупреждение" Тогда
		ОтборПоУровню.Добавить("Предупреждение", "Предупреждение");
	ИначеЕсли Критичность = "Информация" Тогда
		ОтборПоУровню.Добавить("Информация", "Информация");
	ИначеЕсли Критичность = "Примечание" Тогда
		ОтборПоУровню.Добавить("Примечание", "Примечание");
	КонецЕсли;
	
	Если ОтборПоУровню.Количество() > 0 Тогда
		ОтборЖурналаРегистрации.Вставить("Уровень", ОтборПоУровню);
	КонецЕсли;
	
	ОбновитьТекущийСписок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурнал

&НаКлиенте
Процедура ЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
//{{MRG[ <-> ]
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ТекущиеДанные", Элемент.ТекущиеДанные);
	ПараметрыВыбора.Вставить("Поле", Поле);
	ПараметрыВыбора.Вставить("ИнтервалДат", ИнтервалДат);
	ПараметрыВыбора.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ПараметрыВыбора.Вставить("ОбработчикОповещенияУстановкиИнтервалаДат",
		Новый ОписаниеОповещения("УстановитьИнтервалДатДляПросмотраЗавершение", ЭтотОбъект));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ТекущиеДанные = Элементы.Журнал.ТекущиеДанные;
//	Если ТекущиеДанные = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Если Поле.Имя = "Данные" ИЛИ Поле.Имя = "ПредставлениеДанных" Тогда
//		Если ТекущиеДанные.Данные <> Неопределено И (НЕ ТекущиеДанные.Данные.Пустая()) Тогда
//			ОткрытьДанныеДляПросмотра();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Возврат;
//}}MRG[ <-> ]
	ЖурналРегистрацииКлиент.СобытияВыбор(ПараметрыВыбора);
//{{MRG[ <-> ]
//		КонецЕсли;
//	КонецЕсли;
//	ПросмотрТекущегоСобытияВОтдельномОкне();
//}}MRG[ <-> ]
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПриАктивизацииПоля(Элемент)
	
	ДоступенОтборПоЗначениюВТекущейКолонке =
		Элемент.ТекущийЭлемент <> Элементы.Дата
		И Элемент.ТекущийЭлемент <> Элементы.Дата2;
	
	Элементы.УстановитьОтборПоЗначению.Доступность
		= ДоступенОтборПоЗначениюВТекущейКолонке;
	
	Элементы.УстановитьОтборПоЗначениюВТекущейКолонке2.Доступность
		= ДоступенОтборПоЗначениюВТекущейКолонке;
	
	Элементы.УстановитьОтборПоЗначениюВТекущейКолонкеКонтекст.Доступность
		= ДоступенОтборПоЗначениюВТекущейКолонке;
	
	Элементы.УстановитьОтборПоЗначениюВТекущейКолонкеКонтекст2.Доступность
		= ДоступенОтборПоЗначениюВТекущейКолонке;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Событие") Тогда
		
		Если ВыбранноеЗначение.Событие = "УстановленОтборЖурналаРегистрации" Тогда
			
			ОтборЖурналаРегистрации.Очистить();
			Для Каждого ЭлементСписка Из ВыбранноеЗначение.Отбор Цикл
				ОтборЖурналаРегистрации.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
			КонецЦикла;
			
			Если ОтборЖурналаРегистрации.Свойство("Уровень") Тогда
				Если ОтборЖурналаРегистрации.Уровень.Количество() > 0 Тогда
					Критичность = Строка(ОтборЖурналаРегистрации.Уровень);
				КонецЕсли;
			Иначе
				Критичность = "ВсеСобытия";
			КонецЕсли;
			
			ОбновитьТекущийСписок();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
//{{MRG[ <-> ]
Процедура ОбновитьТекущийСписок()
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ОбновитьТекущийСписок() Экспорт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ПрочитатьЖурнал(ОтборЖурналаРегистрации);
//}}MRG[ <-> ]
	Элементы.Страницы.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
//{{MRG[ <-> ]
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "ФормированиеОтчета");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Позиционирование в конец списка
//	Если Журнал.Количество() Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Элементы.Журнал.ТекущаяСтрока = Журнал[Журнал.Количество() - 1].ПолучитьИдентификатор();
//}}MRG[ <-> ]
	РезультатВыполнения = ПрочитатьЖурнал();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьТекущийСписокЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры
//{{MRG[ <-> ]
//	КонецЕсли;
//}}MRG[ <-> ]

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ОбновитьТекущийСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ЖурналРегистрации;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.ПолеИндикаторДлительныхОпераций, "НеИспользовать");
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные(Результат.АдресРезультата);
		ПролистатьВКонецСписка();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПролистатьВКонецСписка();
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор()
//{{MRG[ <-> ]
//	ОтборЖурналаРегистрации.Очистить();
//}}MRG[ <-> ]
	ОтборЖурналаРегистрации = ОтборЖурналаРегистрацииПоУмолчанию;
	Критичность = "ВсеСобытия";
	ОбновитьТекущийСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеДляПросмотра()
//{{MRG[ <-> ]
//	ТекущиеДанные = Элементы.Журнал.ТекущиеДанные;
//}}MRG[ <-> ]
	ЖурналРегистрацииКлиент.ОткрытьДанныеДляПросмотра(ЭлементЖурнал().ТекущиеДанные);
//{{MRG[ <-> ]
//	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Данные = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//
//	ПоказатьЗначение( ,ТекущиеДанные.Данные);
//}}MRG[ <-> ]
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрТекущегоСобытияВОтдельномОкне()
//{{MRG[ <-> ]
//	Данные = Элементы.Журнал.ТекущиеДанные;
//}}MRG[ <-> ]
	ЖурналРегистрацииКлиент.ПросмотрТекущегоСобытияВОтдельномОкне(ЭлементЖурнал().ТекущиеДанные);
//{{MRG[ <-> ]
//	Если Данные = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	ФормаСобытия = ПолучитьФорму("Обработка.ЖурналРегистрации.Форма.ФормаСобытия");
//	ФормаСобытия.ДатаВремя    = Данные.Дата;
//	ФормаСобытия.Пользователь = Данные.ИмяПользователя;
//	ФормаСобытия.Приложение   = Данные.ПредставлениеПриложения;
//	ФормаСобытия.Компьютер    = Данные.Компьютер;
//	ФормаСобытия.Событие      = Данные.ПредставлениеСобытия;
//	ФормаСобытия.Комментарий  = Данные.Комментарий;
//	ФормаСобытия.Метаданные   = Данные.ПредставлениеМетаданных;
//	ФормаСобытия.Данные       = Данные.Данные;
//	ФормаСобытия.ПредставлениеДанных        = Данные.ПредставлениеДанных;
//	ФормаСобытия.ИдентификаторТранзакции    = Данные.Транзакция;
//	ФормаСобытия.СтатусЗавершенияТранзакции = Данные.СтатусТранзакции;
//	ФормаСобытия.Сеанс         = Данные.Сеанс;
//	ФормаСобытия.РабочийСервер = Данные.РабочийСервер;
//	ФормаСобытия.ОсновнойIPПорт        = Данные.ОсновнойIPПорт;
//	ФормаСобытия.ВспомогательныйIPПорт = Данные.ВспомогательныйIPПорт;
//	ФормаСобытия.Открыть();
//}}MRG[ <-> ]
КонецПроцедуры

&НаКлиенте
//{{MRG[ <-> ]
Процедура УстановитьИнтервалДатДляПросмотра()
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура УстановитьИнтервалДатДляПросмотра(Команда)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	УстановкаИнтервалаДатДляПросмотра();
//}}MRG[ <-> ]
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалДатДляПросмотраЗавершение", ЭтотОбъект);
	ЖурналРегистрацииКлиент.УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации, Оповещение)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	УстановитьОтборНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтбораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоЗначениюВТекущейКолонке()
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("Дата");
	
	Элемент = ЭлементЖурнал();
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если СтрЗаканчиваетсяНа(ИмяТекущегоЭлемента, "2")
	 Или СтрЗаканчиваетсяНа(ИмяТекущегоЭлемента, "3") Тогда
		
		ИмяТекущегоЭлемента = Сред(ИмяТекущегоЭлемента, 1, СтрДлина(ИмяТекущегоЭлемента) - 1);
	КонецЕсли;
	
	Если ЖурналРегистрацииКлиент.УстановитьОтборПоЗначениюВТекущейКолонке(Элемент.ТекущиеДанные,
			ИмяТекущегоЭлемента, ОтборЖурналаРегистрации, КолонкиИсключения) Тогда
		
		ОбновитьТекущийСписок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЖурналДляПередачиВТехподдержку(Команда)
	
	ПараметрыСохраненияФайла = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохраненияФайла.Диалог.Фильтр = НСтр("ru = 'Данные журнала регистрации'") + "(*.xml)|*.xml";
	ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, ВыгрузкаЖурналаРегистрации(), "EventLog.xml", ПараметрыСохраненияФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРазделения(Форма, ВидимостьРазделения)
	
	Элементы = Форма.Элементы;
	
	Элементы.ОбластьДанных.Видимость  = ВидимостьРазделения И Форма.ТолькоСтандартныеРазделители;
	Элементы.ОбластьДанных2.Видимость = ВидимостьРазделения И Форма.ТолькоСтандартныеРазделители;
	Элементы.ОбластьДанных3.Видимость = ВидимостьРазделения И Форма.ТолькоСтандартныеРазделители;
	
	Элементы.ПредставлениеРазделенияДанныхСеанса.Видимость =
		ВидимостьРазделения И Не Форма.ТолькоСтандартныеРазделители;
	
	Элементы.ПредставлениеРазделенияДанныхСеанса2.Видимость =
		ВидимостьРазделения И Не Форма.ТолькоСтандартныеРазделители;
	
	Если ВидимостьРазделения И Форма.ТолькоСтандартныеРазделители Тогда
		ЗаголовокГруппы = НСтр("ru = 'Приложение, Сеанс, Область'");
		ПодсказкаГруппы = НСтр("ru = 'Приложение, Сеанс, Область данных'");
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'Приложение, Сеанс'");
		ПодсказкаГруппы = "";
	КонецЕсли;
	Элементы.ГруппаПриложениеСеанс.Заголовок = ЗаголовокГруппы;
	Элементы.ГруппаПриложениеСеанс.Подсказка = ПодсказкаГруппы;
	Элементы.ГруппаПриложениеСеанс2.Заголовок = ЗаголовокГруппы;
	Элементы.ГруппаПриложениеСеанс2.Подсказка = ПодсказкаГруппы;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементЖурнал()
	Возврат ?(Элементы.Журнал.Видимость, Элементы.Журнал, Элементы.Журнал2);
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалДатДляПросмотраЗавершение(ИнтервалУстановлен, ДополнительныеПараметры) Экспорт
	
	Если ИнтервалУстановлен Тогда
		ОбновитьТекущийСписок();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Событие - Строка
//
// Возвращаемое значение:
//  Строка, Неопределено
//
&НаСервере
Функция ПредставлениеСобытия(Событие, ЗначенияОтбора)
	
	ПредставлениеСобытия = ПредставлениеСобытияЖурналаРегистрации(Событие);
	
	Если ЗначениеЗаполнено(ПредставлениеСобытия) Тогда
		Возврат ПредставлениеСобытия;
	КонецЕсли;
	
	ПредставлениеСобытия = ЗначенияОтбора[Событие];
	
	Если ЗначениеЗаполнено(ПредставлениеСобытия) Тогда
		Возврат ПредставлениеСобытия;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОтборПоУмолчанию(СписокСобытий)
	
	ОтборПоУмолчанию = Новый СписокЗначений;
	
	Для Каждого СобытиеЖурнала Из СписокСобытий Цикл
		
		Если СобытиеЖурнала.Ключ = "_$Transaction$_.Commit"
			Или СобытиеЖурнала.Ключ = "_$Transaction$_.Begin"
			Или СобытиеЖурнала.Ключ = "_$Transaction$_.Rollback" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоУмолчанию.Добавить(СобытиеЖурнала.Ключ, СобытиеЖурнала.Значение);
		
	КонецЦикла;
	
	Возврат ОтборПоУмолчанию;
КонецФункции

&НаСервере
Функция ОтборПоПользователюИзПараметра(ПараметрПользователь)
	
	Если Не ЗначениеЗаполнено(ПараметрПользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтборПоПользователю = Новый СписокЗначений;
	Ссылки = Новый Массив;
	Имена = Новый Массив;
	
	Если ТипЗнч(ПараметрПользователь) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из ПараметрПользователь Цикл
			ОбработатьЭлемент(ЭлементСписка.Значение, Ссылки, Имена);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрПользователь) = Тип("Массив") Тогда
		Для Каждого Значение Из ПараметрПользователь Цикл
			ОбработатьЭлемент(Значение, Ссылки, Имена);
		КонецЦикла;
	Иначе
		ОбработатьЭлемент(ПараметрПользователь, Ссылки, Имена);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Имя Из Имена Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
		Если ПользовательИБ = Неопределено Тогда
			ОтборПоПользователю.Добавить(Имя, Имя);
		Иначе
			ОтборПоПользователю.Добавить(НРег(ПользовательИБ.УникальныйИдентификатор), Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ссылки) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Наименование КАК Наименование,
		|	ТекущаяТаблица.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Ссылка В(&Ссылки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТекущаяТаблица.Наименование,
		|	ТекущаяТаблица.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Ссылка В(&Ссылки)";
		Выборка = Запрос.Выполнить().Выбрать();
		ПользовательСПустымУИД = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
				ПользовательСПустымУИД = Выборка.Наименование;
				Продолжить;
			КонецЕсли;
			Если ОтборПоПользователю.НайтиПоЗначению(НРег(Выборка.ИдентификаторПользователяИБ)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				Выборка.ИдентификаторПользователяИБ);
			
			Если ПользовательИБ = Неопределено Тогда
				ОтборПоПользователю.Добавить(НРег(Выборка.ИдентификаторПользователяИБ), Выборка.Наименование);
			Иначе
				ОтборПоПользователю.Добавить(НРег(Выборка.ИдентификаторПользователяИБ), ПользовательИБ.Имя);
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ОтборПоПользователю)
		   И ЗначениеЗаполнено(ПользовательСПустымУИД) Тогда
			ОтборПоПользователю.Добавить(НРег(Новый УникальныйИдентификатор), ПользовательСПустымУИД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоПользователю;
	
КонецФункции

&НаСервере
Процедура ОбработатьЭлемент(Значение, Ссылки, Имена)
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(Значение) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		Если Ссылки.Найти(Значение) = Неопределено Тогда
			Ссылки.Добавить(Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Если Имена.Найти(Значение) = Неопределено Тогда
			Имена.Добавить(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЖурнал()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ДатаНачала    = Неопределено; // Дата
	ДатаОкончания = Неопределено; // Дата
	ДатыОтбораУказаны = ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачала)
		И ЗначениеЗаполнено(ДатаНачала)
		И ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончания)
		И ЗначениеЗаполнено(ДатаОкончания);
		
	Если ДатыОтбораУказаны И ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ПолеИндикаторДлительныхОпераций, "НеИспользовать");
		Элементы.Страницы.ТекущаяСтраница = Элементы.ЖурналРегистрации;
		ВызватьИсключение НСтр("ru = 'Некорректно заданы условия отбора журнала регистрации.
			|Дата начала не может быть больше даты окончания.'");
	КонецЕсли;
	
	ПараметрыОтчета = ПараметрыОтчета();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // запускать сразу
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление журнала регистрации'");
	ПараметрыВыполнения.ЗапуститьНеВФоне = ЗапускатьНеВФоне;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации",
		ПараметрыОтчета, ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполняется"
	 Или ДлительнаяОперация.Статус = "Выполнено" Тогда
	
		ЖурналРегистрации.СформироватьПредставлениеОтбора(ПредставлениеОтбора,
			ОтборЖурналаРегистрации, ОтборЖурналаРегистрацииПоУмолчанию);
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаСервере
Функция ПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ПараметрыОтчета.Вставить("КоличествоПоказываемыхСобытий", КоличествоПоказываемыхСобытий);
	ПараметрыОтчета.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("МенеджерВладельца", Обработки.ЖурналРегистрации);
	ПараметрыОтчета.Вставить("ДобавлятьДополнительныеКолонки", Ложь);
	ПараметрыОтчета.Вставить("Журнал", РеквизитФормыВЗначение("Журнал"));

	Возврат ПараметрыОтчета;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(АдресРезультата)
	Результат      = ПолучитьИзВременногоХранилища(АдресРезультата);
	СобытияЖурнала = Результат.СобытияЖурнала;
	
	ЗначениеВДанныеФормы(СобытияЖурнала, Журнал);
КонецПроцедуры

&НаКлиенте
Процедура ПролистатьВКонецСписка()
	Если Журнал.Количество() > 0 Тогда
		ЭлементЖурнал().ТекущаяСтрока = Журнал[Журнал.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборНаКлиенте()
	
	ОтборФормы = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из ОтборЖурналаРегистрации Цикл
		ОтборФормы.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ОткрытьФорму(
		"Обработка.ЖурналРегистрации.Форма.ОтборЖурналаРегистрации", 
		Новый Структура("Отбор, СобытияПоУмолчанию", ОтборФормы, ОтборЖурналаРегистрацииПоУмолчанию.Событие), 
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КритичностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ВыгрузкаЖурналаРегистрации()
	Возврат ЖурналРегистрации.ЖурналДляТехподдержки(ОтборЖурналаРегистрации, КоличествоПоказываемыхСобытий, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Важность
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Параметры.ЖурналДоступаКДанным Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Важность2.Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Важность.Имя);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Данные
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Параметры.ЖурналДоступаКДанным Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Данные2.Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Данные.Имя);
	КонецЕсли;
	
	ДобавитьУсловиеСкрытияКолонкиДанные(Элемент.Отбор.Элементы);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элементы.Данные.Формат  = НСтр("ru = 'ЧН=0; ДП=''01.01.0001 00:00:00'''");
	Элементы.Данные2.Формат = Элементы.Данные.Формат;
	
	// ПредставлениеДанных
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Параметры.ЖурналДоступаКДанным Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеДанных2.Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеДанных.Имя);
	КонецЕсли;
	
	ДобавитьУсловиеСкрытияКолонкиПредставлениеДанных(Элемент.Отбор.Элементы);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ПредставлениеМетаданных
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Параметры.ЖурналДоступаКДанным Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеМетаданных2.Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеМетаданных.Имя);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.ПредставлениеМетаданных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Комментарий
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	Если Параметры.ЖурналДоступаКДанным Тогда
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Комментарий2.Имя);
	Иначе
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Комментарий.Имя);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.Комментарий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Группа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Подгруппа = Группа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Подгруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	ДобавитьУсловиеСкрытияКолонкиДанные(Подгруппа.Элементы);
	
	Подгруппа = Группа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Подгруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	ДобавитьУсловиеСкрытияКолонкиПредставлениеДанных(Подгруппа.Элементы);
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.ПредставлениеДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловиеСкрытияКолонкиДанные(ЭлементыОтбора)
	
	ОтображаемыеЗначения = Новый СписокЗначений;
	ОтображаемыеЗначения.Добавить(0);
	ОтображаемыеЗначения.Добавить('00010101');
	ОтображаемыеЗначения.Добавить(Ложь);
	
	Группа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.Данные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.Данные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ОтображаемыеЗначения;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловиеСкрытияКолонкиПредставлениеДанных(ЭлементыОтбора);
	
	Группа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.ПредставлениеДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Журнал.СтрокаДанныхСовпадаетСПредставлениемДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Асинх Процедура УстановкаИнтервалаДатДляПросмотра()
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончания);
	ДатаНачала    = ?(ТипЗнч(ДатаНачала)    = Тип("Дата"), ДатаНачала, '00010101000000');
	ДатаОкончания = ?(ТипЗнч(ДатаОкончания) = Тип("Дата"), ДатаОкончания, '00010101000000');
	Если ИнтервалДат.ДатаНачала <> ДатаНачала Тогда
		ИнтервалДат.ДатаНачала = ДатаНачала;
	КонецЕсли;
	Если ИнтервалДат.ДатаОкончания <> ДатаОкончания Тогда
		ИнтервалДат.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	Диалог.Период = ИнтервалДат;
	НовыйИнтервалДат = Ждать Диалог.РедактироватьАсинх();
	Если НЕ НовыйИнтервалДат = Неопределено Тогда
		Если НовыйИнтервалДат.ДатаНачала = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаНачала");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаНачала", НовыйИнтервалДат.ДатаНачала);
		КонецЕсли;
		Если НовыйИнтервалДат.ДатаОкончания = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаОкончания");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаОкончания", НовыйИнтервалДат.ДатаОкончания);
		КонецЕсли;
		ОбновитьТекущийСписок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУстановитьОтбор()
	
	ПараметрФормы = Новый Структура("Отбор", ОтборЖурналаРегистрации);
	Оповещение = Новый ОписаниеОповещения(
			"ВыполнитьУстановитьОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ОтборЖурналаРегистрации",
		ПараметрФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУстановитьОтборЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ОтборЖурналаРегистрации = Результат;
		ОбновитьТекущийСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхПользователей()
	ОткрытьФорму("Обработка.СписокАктивныхПользователей.Форма");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

//&НаСервере
//Процедура ПрочитатьЖурнал(Знач ОтборЖурналаНаКлиенте)
//	// Выгрузка ототборованных событий в таблицу
//	Отбор = Новый Структура;
//	Для каждого ЭлементОтбора Из ОтборЖурналаНаКлиенте Цикл
//		Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
//	КонецЦикла;
//	ТаблицаЗначенийСобытия = Новый ТаблицаЗначений;
//	ПреобразованиеОтбора(Отбор);
//	ВыгрузитьЖурналРегистрации(ТаблицаЗначенийСобытия, Отбор, , , КоличествоПоказываемыхСобытий);
//	ТаблицаЗначенийСобытия.Колонки.Добавить("НомерРисунка", Новый ОписаниеТипов("Число"));
//	Для каждого СтрокаТаблицыЗначенийСобытия Из ТаблицаЗначенийСобытия Цикл
//		СтрокаТаблицыЗначенийСобытия.НомерРисунка = -1;
//		Если СтрокаТаблицыЗначенийСобытия.Уровень = УровеньЖурналаРегистрации.Информация Тогда
//			СтрокаТаблицыЗначенийСобытия.НомерРисунка = 0;
//		ИначеЕсли СтрокаТаблицыЗначенийСобытия.Уровень = УровеньЖурналаРегистрации.Предупреждение Тогда
//			СтрокаТаблицыЗначенийСобытия.НомерРисунка = 1;
//		ИначеЕсли СтрокаТаблицыЗначенийСобытия.Уровень = УровеньЖурналаРегистрации.Ошибка Тогда
//			СтрокаТаблицыЗначенийСобытия.НомерРисунка = 2;
//		КонецЕсли;
//		СтрокаТаблицыЗначенийСобытия.Пользователь = СтрокаТаблицыЗначенийСобытия.ИмяПользователя;
//		Если СтрокаТаблицыЗначенийСобытия.ИмяПользователя = "" Тогда
//			СтрокаТаблицыЗначенийСобытия.ИмяПользователя = НСтр("ru = '<Пользователь по умолчанию>'", "ru");
//		КонецЕсли;
//	КонецЦикла;
//	
//	// Преобразование в универсальный объект
//	ЗначениеВРеквизитФормы(ТаблицаЗначенийСобытия, "Журнал");
//	// Показать параметры отбора
//	СформироватьПредставлениеОтбора();
//	
//КонецПроцедуры

&НаСервере
Процедура ПреобразованиеОтбора(Отбор)
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора)
	// Эта процедура вызывается, если элемент отбора является списком значений,
	// в отборе же должен быть массив значений. Преобразуем список в массив
	НовоеЗначение = Новый Массив;
	
	Для каждого ЗначениеИзСписка Из ЭлементОтбора.Значение Цикл
		Если ЭлементОтбора.Ключ = "Уровень" Тогда
			// Уровни сообщений представлены строкой, требуется преобразование в значение перечисления
			Обработка = РеквизитФормыВЗначение("Объект");
			НовоеЗначение.Добавить(Обработка.УровеньЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		ИначеЕсли ЭлементОтбора.Ключ = "СтатусТранзакции" Тогда
			// Статусы транзакций представлены строкой, требуется преобразование в значение перечисления
			Обработка = РеквизитФормыВЗначение("Объект");
			НовоеЗначение.Добавить(Обработка.СтатусТранзакцииЗаписиЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		Иначе
			НовоеЗначение.Добавить(ЗначениеИзСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Отбор.Вставить(ЭлементОтбора.Ключ, НовоеЗначение);
КонецПроцедуры
	
&НаСервере
Процедура СформироватьПредставлениеОтбора()
	ПредставлениеОтбора = "";
	// Интервал
	ДатаНачалаИнтервала    = Неопределено;
	ДатаОкончанияИнтервала = Неопределено;
	Если НЕ ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачалаИнтервала) ИЛИ
		 ДатаНачалаИнтервала = Неопределено Тогда 
		ДатаНачалаИнтервала    = '00010101000000';
	КонецЕсли;
	Если НЕ ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончанияИнтервала) ИЛИ
		 ДатаОкончанияИнтервала = Неопределено Тогда 
		ДатаОкончанияИнтервала = '00010101000000';
	КонецЕсли;
	Если НЕ (ДатаНачалаИнтервала = '00010101000000' И ДатаОкончанияИнтервала = '00010101000000') Тогда
		ПредставлениеОтбора = НСтр("ru = 'Интервал ('", "ru");
		СтрБезОграничений = НСтр("ru = 'без ограничений'", "ru");
		ПредставлениеОтбора = ПредставлениеОтбора + Формат(ДатаНачалаИнтервала,    "ДЛФ=DT; ДП='" + СтрБезОграничений + "'") + " - ";
		ПредставлениеОтбора = ПредставлениеОтбора + Формат(ДатаОкончанияИнтервала, "ДЛФ=DT; ДП='" + СтрБезОграничений + "'") + ")";
	КонецЕсли;
	
	// Остальные ограничения указываем просто по представлением, без указания значений ограничения
	Для каждого ЭлементОтбора Из ОтборЖурналаРегистрации Цикл
		ИмяОграничения = ЭлементОтбора.Ключ;
		Если ИмяОграничения = "ДатаНачала" ИЛИ ИмяОграничения = "ДатаОкончания" Тогда
			Продолжить; // Интервал уже выводили
		КонецЕсли;
		
		// Для некоторых ограничений меняем представление
		Если ИмяОграничения = "ИмяПриложения" Тогда
			ИмяОграничения = НСтр("ru = 'Приложение'", "ru");
		ИначеЕсли ИмяОграничения = "СтатусТранзакции" Тогда
			ИмяОграничения = ИмяОграничения = НСтр("ru = 'Статус транзакции'", "ru");
		ИначеЕсли ИмяОграничения = "ПредставлениеДанных" Тогда
			ИмяОграничения = ИмяОграничения = НСтр("ru = 'Представление данных'", "ru");
		ИначеЕсли ИмяОграничения = "РабочийСервер" Тогда
			ИмяОграничения = ИмяОграничения = НСтр("ru = 'Рабочий сервер'", "ru");
		ИначеЕсли ИмяОграничения = "ОсновнойIPПорт" Тогда
			ИмяОграничения = ИмяОграничения = НСтр("ru = 'Основной IP порт'", "ru");
		ИначеЕсли ИмяОграничения = "ВспомогательныйIPПорт" Тогда
			ИмяОграничения = ИмяОграничения = НСтр("ru = 'Вспомогательный IP порт'", "ru");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПредставлениеОтбора) Тогда 
			ПредставлениеОтбора = ПредставлениеОтбора + "; ";
		КонецЕсли;
		ПредставлениеОтбора = ПредставлениеОтбора + ИмяОграничения;
	КонецЦикла;
КонецПроцедуры

