///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактируемыйСписок = Параметры.РедактируемыйСписок;
	ОтбираемыеПараметры = Параметры.ОтбираемыеПараметры;
	
	УстановитьПараметрыРедактора(РедактируемыйСписок, ОтбираемыеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	ОтметитьЭлементДерева(Элементы.Список.ТекущиеДанные, Элементы.Список.ТекущиеДанные.Пометка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСоставОтбора(Команда)
	
	Оповестить("ВыборЗначенийЭлементовОтбораЖурналаРегистрации",
	           ПолучитьОтредактированныйСписок(),
	           ВладелецФормы);
	Закрыть();
	
КонецПроцедуры

//{{MRG[ <-> ]
///////////////////////////////////////////////////////////////////////////////////////////
//// Обработчики событий
//}}MRG[ <-> ]
&НаКлиенте
Процедура УстановитьВсеФлажки()
	УстановкаПометок(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки()
	УстановкаПометок(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//{{MRG[ <-> ]
&НаСервере
Процедура УстановитьПараметрыРедактора(РедактируемыйСписок, ОтбираемыеПараметры)
	ЧастиСтроки = СтрРазделить(ОтбираемыеПараметры, ".");
	Если ЧастиСтроки.Количество() > 1 Тогда
		ОтбираемыеПараметры = ЧастиСтроки[0];
		Разделитель = ЧастиСтроки[1];
		СтруктураПараметровОтбора = ПолучитьЗначенияОтбораЖурналаРегистрации();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
///////////////////////////////////////////////////////////////////////////////////////////
//// Экспортируемые процедуры
//
//&НаКлиенте
//Процедура УстановитьПараметрыРедактора(РедактируемыйСписок, ОтбираемыеПараметры) Экспорт
//	СтруктураПараметровОтбора = ПолучитьЗначенияОтбораЖурналаРегистрацииПоКолонке(ОтбираемыеПараметры);
//	ЗначенияОтбора = СтруктураПараметровОтбора[ОтбираемыеПараметры];
//}}MRG[ <-> ]
		ЗначенияОтбора = СтруктураПараметровОтбора[ОтбираемыеПараметры].Получить(Разделитель);
		ЗначенияОтбора.Вставить("", НСтр("ru = '<Не задано>'"));
	Иначе
		СтруктураПараметровОтбора = ПолучитьЗначенияОтбораЖурналаРегистрации(ОтбираемыеПараметры);
		ЗначенияОтбора = СтруктураПараметровОтбора[ОтбираемыеПараметры];
	КонецЕсли;
	// Получение списка представлений событий.
	Если ОтбираемыеПараметры = "Событие" Или ОтбираемыеПараметры = "Event" Тогда
		
		Для Каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
			СтрокаПредставленияСобытий = ПредставленияСобытий.Добавить();
			СтрокаПредставленияСобытий.Представление = ЭлементСоответствия.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияОтбора) = Тип("Массив") Тогда
		ЭлементыСписка = Список.ПолучитьЭлементы();
//{{MRG[ <-> ]
		Для Каждого ЭлементМассива Из ЗначенияОтбора Цикл
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Для каждого ЭлементМассива Из ЗначенияОтбора Цикл
//}}MRG[ <-> ]
			НовыйЭлемент = ЭлементыСписка.Добавить();
			НовыйЭлемент.Пометка = Ложь;
			НовыйЭлемент.Значение = ЭлементМассива;
			НовыйЭлемент.Представление = ЭлементМассива;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначенияОтбора) = Тип("Соответствие") Тогда
//{{MRG[ <-> ]
//		Если ОтбираемыеПараметры = "Событие" ИЛИ ОтбираемыеПараметры = "Event" ИЛИ
//}}MRG[ <-> ]
		Если ОтбираемыеПараметры = "Событие"
			Или ОтбираемыеПараметры = "Event"
			Или ОтбираемыеПараметры = "Метаданные"
			Или ОтбираемыеПараметры = "Metadata" Тогда
			
			// Грузим как дерево
//{{MRG[ <-> ]
			Для Каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
				НовыйЭлемент = ПолучитьВетвьДерева(ЭлементСоответствия.Значение, ОтбираемыеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			 ОтбираемыеПараметры = "Метаданные" ИЛИ ОтбираемыеПараметры = "Metadata" Тогда 
//			Для каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
//				НовыйЭлемент = ПолучитьВетвьДерева(ЭлементСоответствия.Значение);
//}}MRG[ <-> ]
				НовыйЭлемент.Пометка = Ложь;
//{{MRG[ <-> ]
				Если ПустаяСтрока(НовыйЭлемент.Значение) Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовыйЭлемент.Значение = ЭлементСоответствия.Ключ;
//}}MRG[ <-> ]
					НовыйЭлемент.Значение = ЭлементСоответствия.Ключ;
				Иначе
					НовыйЭлемент.Значение = НовыйЭлемент.Значение + Символы.ПС + ЭлементСоответствия.Ключ;
				КонецЕсли;
				НовыйЭлемент.ПолноеПредставление = ЭлементСоответствия.Значение;
			КонецЦикла;
			
		Иначе 
			// Грузим плоским списком
			ДобавленНеУказанныйПользователь = Ложь;
			ЭлементыСписка = Список.ПолучитьЭлементы();
//{{MRG[ <-> ]
			Для Каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Для каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
//}}MRG[ <-> ]
				НовыйЭлемент = ЭлементыСписка.Добавить();
				НовыйЭлемент.Пометка = Ложь;
//{{MRG[ <-> ]
				Если ОтбираемыеПараметры = "РазделениеДанныхСеансаЗначения" Тогда
					НовыйЭлемент.Значение = Формат(ЭлементСоответствия.Ключ, "ЧГ=");
				Иначе
					НовыйЭлемент.Значение = ЭлементСоответствия.Ключ;
				КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовыйЭлемент.Значение = ЭлементСоответствия.Ключ;
//				Если (ОтбираемыеПараметры = "Пользователь" ИЛИ ОтбираемыеПараметры = "User") Тогда
//					// Для пользователей ключем слоужит имя
//					НовыйЭлемент.Значение = ЭлементСоответствия.Значение;
//					НовыйЭлемент.Представление = ЭлементСоответствия.Значение;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					Если НовыйЭлемент.Значение = "" Тогда
//}}MRG[ <-> ]
				Если (ОтбираемыеПараметры = "Пользователь" Или ОтбираемыеПараметры = "User") Тогда
//{{MRG[ <-> ]
					// Для пользователей ключом служит имя.
					НовыйЭлемент.Значение = ЭлементСоответствия.Ключ;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						// Случай для пользователя по умолчанию
//						НовыйЭлемент.Значение = "";
//						НовыйЭлемент.Представление = НСтр("ru = '<Пользователь по умолчанию>'", "ru");
//}}MRG[ <-> ]
					
					Если ЭлементСоответствия.Значение = "" Тогда
						// Случай для пользователя по умолчанию.
						ДобавленНеУказанныйПользователь = Истина;
						НовыйЭлемент.Представление = ПолноеИмяНеУказанногоПользователя();
					Иначе
						// Случай для служебного пользователя.
						ПредставлениеСлужебногоПользователя = ПолноеИмяСлужебногоПользователя(ЭлементСоответствия.Ключ);
						Если Не ПустаяСтрока(ПредставлениеСлужебногоПользователя) Тогда
							НовыйЭлемент.Представление = ПредставлениеСлужебногоПользователя;
						Иначе
							УстановитьПривилегированныйРежим(Истина);
							ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
								ЭлементСоответствия.Ключ);
							УстановитьПривилегированныйРежим(Ложь);
							Если ПользовательИБ = Неопределено Тогда
								НовыйЭлемент.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1 <Удален>'"), ЭлементСоответствия.Значение);
							Иначе
								НовыйЭлемент.Представление = ЭлементСоответствия.Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					НовыйЭлемент.ПолноеПредставление = НовыйЭлемент.Представление;
				Иначе
					НовыйЭлемент.Представление = ЭлементСоответствия.Значение;
					НовыйЭлемент.ПолноеПредставление = ЭлементСоответствия.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ДобавленНеУказанныйПользователь
			   И (ОтбираемыеПараметры = "Пользователь" Или ОтбираемыеПараметры = "User") Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				ПустойПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени("");
				УстановитьПривилегированныйРежим(Ложь);
				НовыйЭлемент = ЭлементыСписка.Добавить();
				НовыйЭлемент.Пометка = Ложь;
				НовыйЭлемент.Значение = ПустойПользовательИБ.УникальныйИдентификатор;
				НовыйЭлемент.Представление = ПолноеИмяНеУказанногоПользователя();
				НовыйЭлемент.ПолноеПредставление = НовыйЭлемент.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
//{{MRG[ <-> ]
	// Помечаем элементы дерева, если им есть соответствие в РедактируемыйСписок.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Помечаем элементы дерева, если им есть соотвествие в РедактируемыйСписок
//}}MRG[ <-> ]
	ОтметитьВстречающиесяЭлементы(Список.ПолучитьЭлементы(), РедактируемыйСписок);
	
//{{MRG[ <-> ]
	// Проверяем список на наличие подчиненных элементов, если их нет,
	// переводим ЭУ в режим Списка.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// проверяем список на наличие подчиненных элементов, если их нет,
//	// переводим ЭУ в режим Списка
//}}MRG[ <-> ]
	ЭтоДерево = Ложь;
//{{MRG[ <-> ]
	Для Каждого ЭлементДерева Из Список.ПолучитьЭлементы() Цикл
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для каждого ЭлементДерева Из Список.ПолучитьЭлементы() Цикл
//}}MRG[ <-> ]
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда 
			ЭтоДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
//{{MRG[ <-> ]
	Если Не ЭтоДерево Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если НЕ ЭтоДерево Тогда
//}}MRG[ <-> ]
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ВыполнитьСортировкуДерева();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтредактированныйСписок()
	
	РедактируемыйСписок = Новый СписокЗначений;
	
	РедактируемыйСписок.Очистить();
	ЕстьНеотмеченные = Ложь;
	ЗаполнитьРедактируемыйСписок(РедактируемыйСписок, Список.ПолучитьЭлементы(), ЕстьНеотмеченные);
	
	Возврат РедактируемыйСписок;
	
КонецФункции

//{{MRG[ <-> ]
&НаСервере
Функция ПолучитьВетвьДерева(Представление, ОтбираемыеПараметры, Рекурсия = Ложь)
	СтрокиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Представление, ".", Истина, Истина);
	Если (ОтбираемыеПараметры = "Метаданные"
			Или ОтбираемыеПараметры = "Metadata")
//}}MRG[ <-> ]
//{{MRG[ <-> ]
///////////////////////////////////////////////////////////////////////////////////////////
//// Вспомогательные процедуры
//&НаКлиенте
//Функция ПолучитьВетвьДерева(Представление)
//	СтрокиПути = РазложитьСтрокуПоТочкам(Представление);
//}}MRG[ <-> ]
		И СтрокиПути.Количество() > 2 Тогда
		ИмяОбъекта = СтрокиПути[0];
		СтрокиПути.Удалить(0);
		ИмяОбъектаМетаданных = СтрСоединить(СтрокиПути, ". ");
		СтрокиПути = Новый Массив;
		СтрокиПути.Добавить(ИмяОбъекта);
		СтрокиПути.Добавить(ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Если СтрокиПути.Количество() = 1 Тогда
		ЭлементыДерева = Список.ПолучитьЭлементы();
		ИмяВетки = СтрокиПути[0];
	ИначеЕсли СтрокиПути.Количество() = 0 Тогда
		ЭлементыДерева = Список.ПолучитьЭлементы();
		ИмяВетки = "";
	Иначе
//{{MRG[ <-> ]
		// Собираем путь к ветке родителя из фрагментов пути.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Собираем путь к ветке родителя из фрагментов пути
//}}MRG[ <-> ]
		ПредставлениеПутиРодителя = "";
		Для Сч = 0 По СтрокиПути.Количество() - 2 Цикл
//{{MRG[ <-> ]
			Если Не ПустаяСтрока(ПредставлениеПутиРодителя) Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Если НЕ ПустаяСтрока(ПредставлениеПутиРодителя) Тогда
//}}MRG[ <-> ]
				ПредставлениеПутиРодителя = ПредставлениеПутиРодителя + ".";
			КонецЕсли;
			ПредставлениеПутиРодителя = ПредставлениеПутиРодителя + СтрокиПути[Сч];
		КонецЦикла;
//{{MRG[ <-> ]
		ЭлементыДерева = ПолучитьВетвьДерева(ПредставлениеПутиРодителя, ОтбираемыеПараметры, Истина).ПолучитьЭлементы();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		ЭлементыДерева = ПолучитьВетвьДерева(ПредставлениеПутиРодителя).ПолучитьЭлементы();
//}}MRG[ <-> ]
		ИмяВетки = СтрокиПути[СтрокиПути.Количество() - 1];
	КонецЕсли;
	
//{{MRG[ <-> ]
	Если ДобавленныеВетки.НайтиПоЗначению(ИмяВетки) <> Неопределено Тогда
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Представление = ИмяВетки Тогда
				Если ЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
					// Это отдельное событие, которое не группируется.
					Продолжить;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
//		Если ЭлементДерева.Представление = ИмяВетки Тогда
//			Возврат ЭлементДерева;
//		КонецЕсли;
//	КонецЦикла;
//	// Не нашли, придется создавать
//}}MRG[ <-> ]
				КонецЕсли;
				
				Если СтрокиПути.Количество() = 1 И Не Рекурсия Тогда
					Прервать;
				КонецЕсли;
				Возврат ЭлементДерева;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Не нашли, придется создавать.
	ДобавленныеВетки.Добавить(ИмяВетки);
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.Представление = ИмяВетки;
	ЭлементДерева.Пометка = Ложь;
	Возврат ЭлементДерева;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРедактируемыйСписок(РедактируемыйСписок, ЭлементыДерева, ЕстьНеотмеченные)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
			ЗаполнитьРедактируемыйСписок(РедактируемыйСписок, ЭлементДерева.ПолучитьЭлементы(), ЕстьНеотмеченные);
		Иначе
			Если ЭлементДерева.Пометка Тогда
				НовыйЭлементСписка = РедактируемыйСписок.Добавить();
				НовыйЭлементСписка.Значение      = ЭлементДерева.Значение;
				НовыйЭлементСписка.Представление = ЭлементДерева.ПолноеПредставление;
			Иначе
				ЕстьНеотмеченные = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//{{MRG[ <-> ]
&НаСервере
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//&НаКлиенте
//}}MRG[ <-> ]
Процедура ОтметитьВстречающиесяЭлементы(ЭлементыДерева, РедактируемыйСписок)
//{{MRG[ <-> ]
//	Если РедактируемыйСписок.Количество() = 0 Тогда
//}}MRG[ <-> ]
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
//{{MRG[ <-> ]
		Если ЭлементДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Пустой список фактически означает "Все"
//		УстановитьВсеФлажки();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Возврат;
//	КонецЕсли;
//
//	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
//		Если ЭлементДерева.ПолучитьЭлементы().Количество() <> 0 Тогда 
//}}MRG[ <-> ]
			ОтметитьВстречающиесяЭлементы(ЭлементДерева.ПолучитьЭлементы(), РедактируемыйСписок);
		Иначе
//{{MRG[ <-> ]
			Если РедактируемыйСписок.НайтиПоЗначению(ЭлементДерева.Значение) <> Неопределено Тогда
				ЭлементДерева.Пометка = Истина;
				ПроверитьСостояниеПометкиВетви(ЭлементДерева.ПолучитьРодителя());
			КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			СобранноеПредставление = СобратьПредставление(ЭлементДерева);
//			Для каждого ЭлементСписка Из РедактируемыйСписок Цикл
//				Если СобранноеПредставление = ЭлементСписка.Представление Тогда
//					ОтметитьЭлементДерева(ЭлементДерева, Истина);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//}}MRG[ <-> ]
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//{{MRG[ <-> ]
Процедура ОтметитьЭлементДерева(ЭлементДерева, Пометка, ПроверитьСостояниеПометкиВетви = Истина)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//Процедура ОтметитьЭлементДерева(ЭлементДерева, Пометка, ПроверятьСостояниеРодителя = Истина)
//}}MRG[ <-> ]
	ЭлементДерева.Пометка = Пометка;
//{{MRG[ <-> ]
	// Отметить все подчиненные элементы дерева.
	Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Отметить все подчиненные элементы дерева
//	Для каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
//}}MRG[ <-> ]
		ОтметитьЭлементДерева(ПодчиненныйЭлементДерева, Пометка, Ложь);
	КонецЦикла;
//{{MRG[ <-> ]
	// Проверить, не должно ли измениться состояние родителя.
	Если ПроверитьСостояниеПометкиВетви Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Проверить, не должно ли измениться состояние родителя
//	Если ПроверятьСостояниеРодителя Тогда
//}}MRG[ <-> ]
		ПроверитьСостояниеПометкиВетви(ЭлементДерева.ПолучитьРодителя());
	КонецЕсли;
КонецПроцедуры

//{{MRG[ <-> ]
&НаКлиентеНаСервереБезКонтекста
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//&НаКлиенте
//}}MRG[ <-> ]
Процедура ПроверитьСостояниеПометкиВетви(Ветвь)
	Если Ветвь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ПодчиненныеВетви = Ветвь.ПолучитьЭлементы();
//{{MRG[ <-> ]
//	Если ПодчиненныеВетви.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//}}MRG[ <-> ]
	
	ЕстьИстина = Ложь;
	ЕстьЛожь = Ложь;
//{{MRG[ <-> ]
	Для Каждого ПодчиненнаяВетвь Из ПодчиненныеВетви Цикл
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для каждого ПодчиненнаяВетвь Из ПодчиненныеВетви Цикл
//}}MRG[ <-> ]
		Если ПодчиненнаяВетвь.Пометка Тогда
			ЕстьИстина = Истина;
			Если ЕстьЛожь Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ЕстьЛожь = Истина;
			Если ЕстьИстина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИстина Тогда
		Если ЕстьЛожь Тогда
//{{MRG[ <-> ]
			// Есть и помеченные и непомеченные, у себя при необходимости ставим не помечено и проверяем родителя.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			// есть и помеченные и непомеченные, у себя при необходимости ставим непомечено и проверяем родителя
//}}MRG[ <-> ]
			Если Ветвь.Пометка Тогда
				Ветвь.Пометка = Ложь;
				ПроверитьСостояниеПометкиВетви(Ветвь.ПолучитьРодителя());
			КонецЕсли;
		Иначе
			// Все подчиненные помечены
//{{MRG[ <-> ]
			Если Не Ветвь.Пометка Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Если НЕ Ветвь.Пометка Тогда
//}}MRG[ <-> ]
				Ветвь.Пометка = Истина;
				ПроверитьСостояниеПометкиВетви(Ветвь.ПолучитьРодителя());
			КонецЕсли;
		КонецЕсли;
	Иначе
//{{MRG[ <-> ]
		// Все подчиненные не помечены.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// все подчиненные непомечены
//}}MRG[ <-> ]
		Если Ветвь.Пометка Тогда
			Ветвь.Пометка = Ложь;
			ПроверитьСостояниеПометкиВетви(Ветвь.ПолучитьРодителя());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//{{MRG[ <-> ]
&НаСервере
Процедура УстановкаПометок(Значение, ВеткаДерева = Неопределено)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//&НаКлиенте
//Процедура УстановкаПометок(Значение)
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для каждого ЭлементДерева Из Список.ПолучитьЭлементы() Цикл
//}}MRG[ <-> ]
	Если ВеткаДерева = Неопределено Тогда
		ВеткаДерева = Список;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из ВеткаДерева.ПолучитьЭлементы() Цикл
		СтрокаСписка.Пометка = Значение;
		УстановкаПометок(Значение, СтрокаСписка);
	КонецЦикла;
	
КонецПроцедуры
//{{MRG[ <-> ]
//		ОтметитьЭлементДерева(ЭлементДерева, Значение, Ложь);
//}}MRG[ <-> ]

&НаСервере
Процедура ВыполнитьСортировкуДерева()
	
	СписокДерево = РеквизитФормыВЗначение("Список");
	СписокДерево.Строки.Сортировать("Представление Возр", Истина);
	ЗначениеВРеквизитФормы(СписокДерево, "Список");
	
КонецПроцедуры

&НаСервере
Функция ПолноеИмяНеУказанногоПользователя()
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяСлужебногоПользователя(ИдентификаторПользователяИБ)
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
	   И ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Возврат МодульРаботаВМоделиСервиса.ПсевдонимПользователяИнформационнойБазы(ИдентификаторПользователяИБ);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти


// Функция раскладывает строку в массив строк, используя точку как разделитель
&НаКлиенте
Функция РазложитьСтрокуПоТочкам(Знач Представление)
	Фрагменты = Новый Массив;
	Пока Истина Цикл
		Представление = СокрЛП(Представление);
		ПозицияТочки = Найти(Представление, ".");
		Если ПозицияТочки > 0 Тогда
			Фрагмент = СокрЛП(Лев(Представление, ПозицияТочки - 1));
			Фрагменты.Добавить(Фрагмент);
			Представление = Сред(Представление, ПозицияТочки + 1);
		Иначе
			Фрагменты.Добавить(СокрЛП(Представление));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Фрагменты;
КонецФункции

&НаСервере
Функция ПолучитьЗначенияОтбораЖурналаРегистрацииПоКолонке(ОтбираемыеПараметры)
	Возврат ПолучитьЗначенияОтбораЖурналаРегистрации(ОтбираемыеПараметры);
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокПоддерева(РедактируемыйСписок, ЭлементыДерева, ЕстьНеотмеченные)
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
			ПолучитьСписокПоддерева(РедактируемыйСписок, ЭлементДерева.ПолучитьЭлементы(), ЕстьНеотмеченные);
		Иначе
			Если ЭлементДерева.Пометка Тогда
				НовыйЭлементСписка = РедактируемыйСписок.Добавить();
				НовыйЭлементСписка.Значение      = ЭлементДерева.Значение;
				НовыйЭлементСписка.Представление = СобратьПредставление(ЭлементДерева);
			Иначе
				ЕстьНеотмеченные = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СобратьПредставление(ЭлементДерева)
	Если ЭлементДерева = Неопределено Тогда 
		Возврат "";
	КонецЕсли;
	Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
		Возврат ЭлементДерева.Представление;
	КонецЕсли;
	Возврат СобратьПредставление(ЭлементДерева.ПолучитьРодителя()) + "." + ЭлементДерева.Представление;
КонецФункции

